agent Main {
    module EIS ei;
    module Console C;
    module System S;

    types tower_ont {
        formula free(string);
    }

    inference free(string X) :- ~ei.on(string Y, X);
    inference free(string X) :- X == "table";

    rule +!main(list args) {
        ei.launch("hw","dependency/tower-1.3.0.jar");
        ei.init();
	    ei.join();
        ei.link("gripper");
	    ei.startEnv();

        C.println("waiting for block f");
        wait(ei.block("f"));

        !tower("a", "b");
        !tower("b", "a", "d");
        !tower("f", "a", "d", "e");
        S.exit();
    }

    rule +!tower(string X, string Y, string Z) {
        !holding(Z);!on(Z, "table");
        !holding(Y);!on(Y, Z);
        !holding(X);!on(X, Y);
    }

    rule +!tower(string W, string X, string Y, string Z) {
        !holding(Z);!on(Z, "table");
        !holding(Y);!on(Y, Z);
        !holding(X);!on(X, Y);
        !holding(W);!on(W, X);
    }

    rule +!tower(string Y, string Z) {
        !holding(Z);!on(Z, "table");
        !holding(Y);!on(Y, Z);
        }

    rule +!holding(string target) : ~ei.holding(string Y) & free(target) {
        ei.pickup(target);
        wait(ei.holding(target));
    }

    rule +!holding(string target) : ~ei.holding(string Y) & ~free(target) {
        C.println("called holding but target is not free");
        !free(target);
        !holding(target);
    }

    rule +!free(string target) : ei.on(string A, target) & ~free(A) {
        C.println("block on top of target is not free");
        !free(A);
    }

    rule +!free(string target) : ~free(target) & ei.on(string A, target) {
        C.println("putting the top block on the table");
        !holding(A);
        !on(A, "table");
    }

    rule +!on(string block, string target) : ei.holding(block) & free(target) {
        ei.putdown(block, target);
        wait(ei.on(block, target));
    }

}
